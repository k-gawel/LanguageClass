input TextbookInput {
    name: String,
}

type Textbook {
    id: Int,
    name: String,
    chapters: [Chapter]
}

type Chapter {
    id: Int,
    title: String,
    content: [ChapterPart]
}

input ChapterInput {
    textbookId: Int,
    title: String,
    number: Int
}

interface ChapterPart {
    id: Int,
    title: String
}

interface QuestionContent {
    id: Int,
    content: [String]
}

type Exercise implements ChapterPart {
    id: Int,
    title: String,
    type: String,
    questions: [QuestionContent]
}

type Example implements ChapterPart {
    id: Int,
    title: String
}

extend type Mutation {
    addTextbook(input: TextbookInput): Textbook,
    addChapter(textbookId: Int, input: ChapterInput): Chapter
}

extend type Query {
    hello: String,
    getTextbooks: [Textbook],
    getTextbook(id: Int): Textbook,
    getChapter(id: Int): Chapter
}

extend type Query {
    exerciseContent(id: Int): Exercise
}