/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.TextbookRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Textbook extends TableImpl<TextbookRecord> {

    private static final long serialVersionUID = 1250438689;

    /**
     * The reference instance of <code>public.textbook</code>
     */
    public static final Textbook TEXTBOOK = new Textbook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextbookRecord> getRecordType() {
        return TextbookRecord.class;
    }

    /**
     * The column <code>public.textbook.key</code>.
     */
    public final TableField<TextbookRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.textbook.id</code>.
     */
    public final TableField<TextbookRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.textbook.is_public</code>.
     */
    public final TableField<TextbookRecord, Boolean> IS_PUBLIC = createField(DSL.name("is_public"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.textbook.title</code>.
     */
    public final TableField<TextbookRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.textbook.created_by</code>.
     */
    public final TableField<TextbookRecord, Long> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.textbook</code> table reference
     */
    public Textbook() {
        this(DSL.name("textbook"), null);
    }

    /**
     * Create an aliased <code>public.textbook</code> table reference
     */
    public Textbook(String alias) {
        this(DSL.name(alias), TEXTBOOK);
    }

    /**
     * Create an aliased <code>public.textbook</code> table reference
     */
    public Textbook(Name alias) {
        this(alias, TEXTBOOK);
    }

    private Textbook(Name alias, Table<TextbookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Textbook(Name alias, Table<TextbookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Textbook(Table<O> child, ForeignKey<O, TextbookRecord> key) {
        super(child, key, TEXTBOOK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TextbookRecord> getPrimaryKey() {
        return Keys.TEXTBOOK_PKEY;
    }

    @Override
    public List<UniqueKey<TextbookRecord>> getKeys() {
        return Arrays.<UniqueKey<TextbookRecord>>asList(Keys.TEXTBOOK_PKEY, Keys.UK_9A2MG87PBRH3OTFORPT5SEOJS);
    }

    @Override
    public List<ForeignKey<TextbookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TextbookRecord, ?>>asList(Keys.TEXTBOOK__FKJHEJ99UFQUQ06T0FVTJG2GOPF);
    }

    public AppUser appUser() {
        return new AppUser(this, Keys.TEXTBOOK__FKJHEJ99UFQUQ06T0FVTJG2GOPF);
    }

    @Override
    public Textbook as(String alias) {
        return new Textbook(DSL.name(alias), this);
    }

    @Override
    public Textbook as(Name alias) {
        return new Textbook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Textbook rename(String name) {
        return new Textbook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Textbook rename(Name name) {
        return new Textbook(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Boolean, String, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
