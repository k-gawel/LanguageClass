/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.TextbookAllowedUsersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TextbookAllowedUsers extends TableImpl<TextbookAllowedUsersRecord> {

    private static final long serialVersionUID = 344219526;

    /**
     * The reference instance of <code>public.textbook_allowed_users</code>
     */
    public static final TextbookAllowedUsers TEXTBOOK_ALLOWED_USERS = new TextbookAllowedUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextbookAllowedUsersRecord> getRecordType() {
        return TextbookAllowedUsersRecord.class;
    }

    /**
     * The column <code>public.textbook_allowed_users.textbook</code>.
     */
    public final TableField<TextbookAllowedUsersRecord, Long> TEXTBOOK = createField(DSL.name("textbook"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.textbook_allowed_users.student</code>.
     */
    public final TableField<TextbookAllowedUsersRecord, Long> STUDENT = createField(DSL.name("student"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.textbook_allowed_users</code> table reference
     */
    public TextbookAllowedUsers() {
        this(DSL.name("textbook_allowed_users"), null);
    }

    /**
     * Create an aliased <code>public.textbook_allowed_users</code> table reference
     */
    public TextbookAllowedUsers(String alias) {
        this(DSL.name(alias), TEXTBOOK_ALLOWED_USERS);
    }

    /**
     * Create an aliased <code>public.textbook_allowed_users</code> table reference
     */
    public TextbookAllowedUsers(Name alias) {
        this(alias, TEXTBOOK_ALLOWED_USERS);
    }

    private TextbookAllowedUsers(Name alias, Table<TextbookAllowedUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TextbookAllowedUsers(Name alias, Table<TextbookAllowedUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TextbookAllowedUsers(Table<O> child, ForeignKey<O, TextbookAllowedUsersRecord> key) {
        super(child, key, TEXTBOOK_ALLOWED_USERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<TextbookAllowedUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<TextbookAllowedUsersRecord>>asList(Keys.UK_F4QAOFYJB4FUELEU7EY1ODNTO);
    }

    @Override
    public List<ForeignKey<TextbookAllowedUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TextbookAllowedUsersRecord, ?>>asList(Keys.TEXTBOOK_ALLOWED_USERS__FKNJTW99WOJYDOLGQ4OEJJ06O11, Keys.TEXTBOOK_ALLOWED_USERS__FKN51F5D9JREYB5HYON4LSMSD8);
    }

    public Textbook textbook() {
        return new Textbook(this, Keys.TEXTBOOK_ALLOWED_USERS__FKNJTW99WOJYDOLGQ4OEJJ06O11);
    }

    public AppUser appUser() {
        return new AppUser(this, Keys.TEXTBOOK_ALLOWED_USERS__FKN51F5D9JREYB5HYON4LSMSD8);
    }

    @Override
    public TextbookAllowedUsers as(String alias) {
        return new TextbookAllowedUsers(DSL.name(alias), this);
    }

    @Override
    public TextbookAllowedUsers as(Name alias) {
        return new TextbookAllowedUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TextbookAllowedUsers rename(String name) {
        return new TextbookAllowedUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TextbookAllowedUsers rename(Name name) {
        return new TextbookAllowedUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
