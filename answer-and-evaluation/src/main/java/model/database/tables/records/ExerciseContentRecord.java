/*
 * This file is generated by jOOQ.
 */
package model.database.tables.records;


import model.database.tables.ExerciseContent;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExerciseContentRecord extends UpdatableRecordImpl<ExerciseContentRecord> implements Record4<Long, String, String, Integer> {

    private static final long serialVersionUID = 2014194394;

    /**
     * Setter for <code>public.exercise_content.key</code>.
     */
    public void setKey(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.exercise_content.key</code>.
     */
    public Long getKey() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.exercise_content.id</code>.
     */
    public void setId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.exercise_content.id</code>.
     */
    public String getId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.exercise_content.title</code>.
     */
    public void setTitle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.exercise_content.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.exercise_content.type</code>.
     */
    public void setType(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.exercise_content.type</code>.
     */
    public Integer getType() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExerciseContent.EXERCISE_CONTENT.KEY;
    }

    @Override
    public Field<String> field2() {
        return ExerciseContent.EXERCISE_CONTENT.ID;
    }

    @Override
    public Field<String> field3() {
        return ExerciseContent.EXERCISE_CONTENT.TITLE;
    }

    @Override
    public Field<Integer> field4() {
        return ExerciseContent.EXERCISE_CONTENT.TYPE;
    }

    @Override
    public Long component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getId();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public Integer component4() {
        return getType();
    }

    @Override
    public Long value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getId();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public Integer value4() {
        return getType();
    }

    @Override
    public ExerciseContentRecord value1(Long value) {
        setKey(value);
        return this;
    }

    @Override
    public ExerciseContentRecord value2(String value) {
        setId(value);
        return this;
    }

    @Override
    public ExerciseContentRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public ExerciseContentRecord value4(Integer value) {
        setType(value);
        return this;
    }

    @Override
    public ExerciseContentRecord values(Long value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExerciseContentRecord
     */
    public ExerciseContentRecord() {
        super(ExerciseContent.EXERCISE_CONTENT);
    }

    /**
     * Create a detached, initialised ExerciseContentRecord
     */
    public ExerciseContentRecord(Long key, String id, String title, Integer type) {
        super(ExerciseContent.EXERCISE_CONTENT);

        set(0, key);
        set(1, id);
        set(2, title);
        set(3, type);
    }
}
