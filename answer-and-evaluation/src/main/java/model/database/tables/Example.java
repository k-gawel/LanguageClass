/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.ExampleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Example extends TableImpl<ExampleRecord> {

    private static final long serialVersionUID = -1660258704;

    /**
     * The reference instance of <code>public.example</code>
     */
    public static final Example EXAMPLE = new Example();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExampleRecord> getRecordType() {
        return ExampleRecord.class;
    }

    /**
     * The column <code>public.example.key</code>.
     */
    public final TableField<ExampleRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.example.id</code>.
     */
    public final TableField<ExampleRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.example.title</code>.
     */
    public final TableField<ExampleRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.example</code> table reference
     */
    public Example() {
        this(DSL.name("example"), null);
    }

    /**
     * Create an aliased <code>public.example</code> table reference
     */
    public Example(String alias) {
        this(DSL.name(alias), EXAMPLE);
    }

    /**
     * Create an aliased <code>public.example</code> table reference
     */
    public Example(Name alias) {
        this(alias, EXAMPLE);
    }

    private Example(Name alias, Table<ExampleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Example(Name alias, Table<ExampleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Example(Table<O> child, ForeignKey<O, ExampleRecord> key) {
        super(child, key, EXAMPLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExampleRecord> getPrimaryKey() {
        return Keys.EXAMPLE_PKEY;
    }

    @Override
    public List<UniqueKey<ExampleRecord>> getKeys() {
        return Arrays.<UniqueKey<ExampleRecord>>asList(Keys.EXAMPLE_PKEY, Keys.UK_DHA28V9Y1QC4YUJ18PA8ARRFI);
    }

    @Override
    public Example as(String alias) {
        return new Example(DSL.name(alias), this);
    }

    @Override
    public Example as(Name alias) {
        return new Example(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(String name) {
        return new Example(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Example rename(Name name) {
        return new Example(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
