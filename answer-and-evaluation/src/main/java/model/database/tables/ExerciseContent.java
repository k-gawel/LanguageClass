/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.ExerciseContentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExerciseContent extends TableImpl<ExerciseContentRecord> {

    private static final long serialVersionUID = 905778093;

    /**
     * The reference instance of <code>public.exercise_content</code>
     */
    public static final ExerciseContent EXERCISE_CONTENT = new ExerciseContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExerciseContentRecord> getRecordType() {
        return ExerciseContentRecord.class;
    }

    /**
     * The column <code>public.exercise_content.key</code>.
     */
    public final TableField<ExerciseContentRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.exercise_content.id</code>.
     */
    public final TableField<ExerciseContentRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.exercise_content.title</code>.
     */
    public final TableField<ExerciseContentRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.exercise_content.type</code>.
     */
    public final TableField<ExerciseContentRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.exercise_content</code> table reference
     */
    public ExerciseContent() {
        this(DSL.name("exercise_content"), null);
    }

    /**
     * Create an aliased <code>public.exercise_content</code> table reference
     */
    public ExerciseContent(String alias) {
        this(DSL.name(alias), EXERCISE_CONTENT);
    }

    /**
     * Create an aliased <code>public.exercise_content</code> table reference
     */
    public ExerciseContent(Name alias) {
        this(alias, EXERCISE_CONTENT);
    }

    private ExerciseContent(Name alias, Table<ExerciseContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExerciseContent(Name alias, Table<ExerciseContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ExerciseContent(Table<O> child, ForeignKey<O, ExerciseContentRecord> key) {
        super(child, key, EXERCISE_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ExerciseContentRecord> getPrimaryKey() {
        return Keys.EXERCISE_CONTENT_PKEY;
    }

    @Override
    public List<UniqueKey<ExerciseContentRecord>> getKeys() {
        return Arrays.<UniqueKey<ExerciseContentRecord>>asList(Keys.EXERCISE_CONTENT_PKEY, Keys.UK_I80J5IRXFUY1KG5MFN2T41502);
    }

    @Override
    public ExerciseContent as(String alias) {
        return new ExerciseContent(DSL.name(alias), this);
    }

    @Override
    public ExerciseContent as(Name alias) {
        return new ExerciseContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseContent rename(String name) {
        return new ExerciseContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseContent rename(Name name) {
        return new ExerciseContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
