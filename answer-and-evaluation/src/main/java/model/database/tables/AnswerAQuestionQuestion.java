/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.AnswerAQuestionQuestionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnswerAQuestionQuestion extends TableImpl<AnswerAQuestionQuestionRecord> {

    private static final long serialVersionUID = -1179249094;

    /**
     * The reference instance of <code>public.answer_a_question_question</code>
     */
    public static final AnswerAQuestionQuestion ANSWER_A_QUESTION_QUESTION = new AnswerAQuestionQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerAQuestionQuestionRecord> getRecordType() {
        return AnswerAQuestionQuestionRecord.class;
    }

    /**
     * The column <code>public.answer_a_question_question.key</code>.
     */
    public final TableField<AnswerAQuestionQuestionRecord, Long> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.answer_a_question_question.id</code>.
     */
    public final TableField<AnswerAQuestionQuestionRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.answer_a_question_question.question_content</code>.
     */
    public final TableField<AnswerAQuestionQuestionRecord, String> QUESTION_CONTENT = createField(DSL.name("question_content"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.answer_a_question_question</code> table reference
     */
    public AnswerAQuestionQuestion() {
        this(DSL.name("answer_a_question_question"), null);
    }

    /**
     * Create an aliased <code>public.answer_a_question_question</code> table reference
     */
    public AnswerAQuestionQuestion(String alias) {
        this(DSL.name(alias), ANSWER_A_QUESTION_QUESTION);
    }

    /**
     * Create an aliased <code>public.answer_a_question_question</code> table reference
     */
    public AnswerAQuestionQuestion(Name alias) {
        this(alias, ANSWER_A_QUESTION_QUESTION);
    }

    private AnswerAQuestionQuestion(Name alias, Table<AnswerAQuestionQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AnswerAQuestionQuestion(Name alias, Table<AnswerAQuestionQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AnswerAQuestionQuestion(Table<O> child, ForeignKey<O, AnswerAQuestionQuestionRecord> key) {
        super(child, key, ANSWER_A_QUESTION_QUESTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AnswerAQuestionQuestionRecord> getPrimaryKey() {
        return Keys.ANSWER_A_QUESTION_QUESTION_PKEY;
    }

    @Override
    public List<UniqueKey<AnswerAQuestionQuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerAQuestionQuestionRecord>>asList(Keys.ANSWER_A_QUESTION_QUESTION_PKEY, Keys.UK_HOX2F8E86CJQM5U1MVV6Y8DSK);
    }

    @Override
    public AnswerAQuestionQuestion as(String alias) {
        return new AnswerAQuestionQuestion(DSL.name(alias), this);
    }

    @Override
    public AnswerAQuestionQuestion as(Name alias) {
        return new AnswerAQuestionQuestion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerAQuestionQuestion rename(String name) {
        return new AnswerAQuestionQuestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnswerAQuestionQuestion rename(Name name) {
        return new AnswerAQuestionQuestion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
