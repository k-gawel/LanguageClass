/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.TextbookChapterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TextbookChapter extends TableImpl<TextbookChapterRecord> {

    private static final long serialVersionUID = -1228892425;

    /**
     * The reference instance of <code>public.textbook_chapter</code>
     */
    public static final TextbookChapter TEXTBOOK_CHAPTER = new TextbookChapter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TextbookChapterRecord> getRecordType() {
        return TextbookChapterRecord.class;
    }

    /**
     * The column <code>public.textbook_chapter.textbook</code>.
     */
    public final TableField<TextbookChapterRecord, Long> TEXTBOOK = createField(DSL.name("textbook"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.textbook_chapter.chapter</code>.
     */
    public final TableField<TextbookChapterRecord, Long> CHAPTER = createField(DSL.name("chapter"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.textbook_chapter</code> table reference
     */
    public TextbookChapter() {
        this(DSL.name("textbook_chapter"), null);
    }

    /**
     * Create an aliased <code>public.textbook_chapter</code> table reference
     */
    public TextbookChapter(String alias) {
        this(DSL.name(alias), TEXTBOOK_CHAPTER);
    }

    /**
     * Create an aliased <code>public.textbook_chapter</code> table reference
     */
    public TextbookChapter(Name alias) {
        this(alias, TEXTBOOK_CHAPTER);
    }

    private TextbookChapter(Name alias, Table<TextbookChapterRecord> aliased) {
        this(alias, aliased, null);
    }

    private TextbookChapter(Name alias, Table<TextbookChapterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TextbookChapter(Table<O> child, ForeignKey<O, TextbookChapterRecord> key) {
        super(child, key, TEXTBOOK_CHAPTER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<TextbookChapterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TextbookChapterRecord, ?>>asList(Keys.TEXTBOOK_CHAPTER__FK4YMH9O36BGVH2Y4C0UJCDRPY0, Keys.TEXTBOOK_CHAPTER__FKBESD1ASK5IEAE6P909O2GRQOE);
    }

    public Textbook textbook() {
        return new Textbook(this, Keys.TEXTBOOK_CHAPTER__FK4YMH9O36BGVH2Y4C0UJCDRPY0);
    }

    public Chapter chapter() {
        return new Chapter(this, Keys.TEXTBOOK_CHAPTER__FKBESD1ASK5IEAE6P909O2GRQOE);
    }

    @Override
    public TextbookChapter as(String alias) {
        return new TextbookChapter(DSL.name(alias), this);
    }

    @Override
    public TextbookChapter as(Name alias) {
        return new TextbookChapter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TextbookChapter rename(String name) {
        return new TextbookChapter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TextbookChapter rename(Name name) {
        return new TextbookChapter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
