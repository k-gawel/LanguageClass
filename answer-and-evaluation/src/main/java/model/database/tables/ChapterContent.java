/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.ChapterContentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChapterContent extends TableImpl<ChapterContentRecord> {

    private static final long serialVersionUID = 1987321141;

    /**
     * The reference instance of <code>public.chapter_content</code>
     */
    public static final ChapterContent CHAPTER_CONTENT = new ChapterContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChapterContentRecord> getRecordType() {
        return ChapterContentRecord.class;
    }

    /**
     * The column <code>public.chapter_content.chapter</code>.
     */
    public final TableField<ChapterContentRecord, Long> CHAPTER = createField(DSL.name("chapter"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.chapter_content.content</code>.
     */
    public final TableField<ChapterContentRecord, Long> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.chapter_content</code> table reference
     */
    public ChapterContent() {
        this(DSL.name("chapter_content"), null);
    }

    /**
     * Create an aliased <code>public.chapter_content</code> table reference
     */
    public ChapterContent(String alias) {
        this(DSL.name(alias), CHAPTER_CONTENT);
    }

    /**
     * Create an aliased <code>public.chapter_content</code> table reference
     */
    public ChapterContent(Name alias) {
        this(alias, CHAPTER_CONTENT);
    }

    private ChapterContent(Name alias, Table<ChapterContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChapterContent(Name alias, Table<ChapterContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ChapterContent(Table<O> child, ForeignKey<O, ChapterContentRecord> key) {
        super(child, key, CHAPTER_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ChapterContentRecord>> getKeys() {
        return Arrays.<UniqueKey<ChapterContentRecord>>asList(Keys.UK_DNGLS185Y9W4QPAM76DEPW8YD);
    }

    @Override
    public List<ForeignKey<ChapterContentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChapterContentRecord, ?>>asList(Keys.CHAPTER_CONTENT__FK2QCOKHWV4PK2PM7BN633B0GH0);
    }

    public Chapter chapter() {
        return new Chapter(this, Keys.CHAPTER_CONTENT__FK2QCOKHWV4PK2PM7BN633B0GH0);
    }

    @Override
    public ChapterContent as(String alias) {
        return new ChapterContent(DSL.name(alias), this);
    }

    @Override
    public ChapterContent as(Name alias) {
        return new ChapterContent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChapterContent rename(String name) {
        return new ChapterContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChapterContent rename(Name name) {
        return new ChapterContent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
