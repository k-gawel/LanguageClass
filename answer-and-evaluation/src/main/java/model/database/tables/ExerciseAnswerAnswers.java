/*
 * This file is generated by jOOQ.
 */
package model.database.tables;


import java.util.Arrays;
import java.util.List;

import model.database.Keys;
import model.database.Public;
import model.database.tables.records.ExerciseAnswerAnswersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExerciseAnswerAnswers extends TableImpl<ExerciseAnswerAnswersRecord> {

    private static final long serialVersionUID = -1742629641;

    /**
     * The reference instance of <code>public.exercise_answer_answers</code>
     */
    public static final ExerciseAnswerAnswers EXERCISE_ANSWER_ANSWERS = new ExerciseAnswerAnswers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExerciseAnswerAnswersRecord> getRecordType() {
        return ExerciseAnswerAnswersRecord.class;
    }

    /**
     * The column <code>public.exercise_answer_answers.exercise_answer</code>.
     */
    public final TableField<ExerciseAnswerAnswersRecord, Long> EXERCISE_ANSWER = createField(DSL.name("exercise_answer"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.exercise_answer_answers.question_answer</code>.
     */
    public final TableField<ExerciseAnswerAnswersRecord, Long> QUESTION_ANSWER = createField(DSL.name("question_answer"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.exercise_answer_answers</code> table reference
     */
    public ExerciseAnswerAnswers() {
        this(DSL.name("exercise_answer_answers"), null);
    }

    /**
     * Create an aliased <code>public.exercise_answer_answers</code> table reference
     */
    public ExerciseAnswerAnswers(String alias) {
        this(DSL.name(alias), EXERCISE_ANSWER_ANSWERS);
    }

    /**
     * Create an aliased <code>public.exercise_answer_answers</code> table reference
     */
    public ExerciseAnswerAnswers(Name alias) {
        this(alias, EXERCISE_ANSWER_ANSWERS);
    }

    private ExerciseAnswerAnswers(Name alias, Table<ExerciseAnswerAnswersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExerciseAnswerAnswers(Name alias, Table<ExerciseAnswerAnswersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ExerciseAnswerAnswers(Table<O> child, ForeignKey<O, ExerciseAnswerAnswersRecord> key) {
        super(child, key, EXERCISE_ANSWER_ANSWERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ExerciseAnswerAnswersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExerciseAnswerAnswersRecord, ?>>asList(Keys.EXERCISE_ANSWER_ANSWERS__FKLHK6E5SE6YV1EPHX2XR6A09C5, Keys.EXERCISE_ANSWER_ANSWERS__FK1HR06B5JFHN8XQKGBCPA86S12);
    }

    public ExerciseAnswer exerciseAnswer() {
        return new ExerciseAnswer(this, Keys.EXERCISE_ANSWER_ANSWERS__FKLHK6E5SE6YV1EPHX2XR6A09C5);
    }

    public QuestionAnswer questionAnswer() {
        return new QuestionAnswer(this, Keys.EXERCISE_ANSWER_ANSWERS__FK1HR06B5JFHN8XQKGBCPA86S12);
    }

    @Override
    public ExerciseAnswerAnswers as(String alias) {
        return new ExerciseAnswerAnswers(DSL.name(alias), this);
    }

    @Override
    public ExerciseAnswerAnswers as(Name alias) {
        return new ExerciseAnswerAnswers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseAnswerAnswers rename(String name) {
        return new ExerciseAnswerAnswers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExerciseAnswerAnswers rename(Name name) {
        return new ExerciseAnswerAnswers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
